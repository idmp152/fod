version: '3'

x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  # delete-daemon:
  #   build: ./delete-daemon

  ingest-daemon:
    build: 
      dockerfile: ./ingest-daemon/Dockerfile
      context: ./
    volumes:
      - ./ingest-daemon:/code/ingest-daemon
      - ./fod_common:/code/fod_common
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_primary:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      - AWS_ACCESS_KEY_ID=s3accesskey
      - AWS_SECRET_ACCESS_KEY=s3secretkey
      - PRESIGNED_URL_HOSTNAME=localhost
      - PRESIGNED_URL_PORT=8000

  hangref-daemon:
    build: 
      dockerfile: ./hangref-daemon/Dockerfile
      context: ./
    volumes:
      - ./hangref-daemon:/code/hangref-daemon
      - ./fod_common:/code/fod_common
    restart: always
    depends_on:
      - minio
      - postgres_primary
    environment:
      - AWS_ACCESS_KEY_ID=s3accesskey
      - AWS_SECRET_ACCESS_KEY=s3secretkey

  # deleting-service:
  #   build: ./deleting-service
  #   ports:
  #     - 5001:80

  ingest-service:
    build: 
      dockerfile: ./ingest-service/Dockerfile
      context: ./
    volumes:
      - ./ingest-service:/code/ingest-service
    restart: always
    ports:
      - 5002:80
    depends_on:
      rabbitmq:
        condition: service_healthy

  # serving-service:
  #   build: ./serving-service
  #   ports:
  #     - 5003:80
  
  # authentication-service:
  #   build: ./authentication-service
  #   ports:
  #     - 5004:80

  rabbitmq:
    image: rabbitmq:3.11.28-management
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
    ports:
      - 15672:15672
    expose:
      - 5672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  postgres_primary:
    <<: *postgres-common
    expose:
      - 5432
    ports:
      - 5432:5432
    hostname: postgres_primary
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - postgresql_master_data:/var/lib/postgresql/data
      - ./postgres-replica-init.sql:/docker-entrypoint-initdb.d/postgres-replica-init.sql

  postgres_replica:
    <<: *postgres-common
    hostname: postgres_replica
    expose:
      - 5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/root/redis
    environment:
      - REDIS_PASSWORD=my-password
      - REDIS_PORT=6379
      - REDIS_DATABASES=16

  minio:
    image: quay.io/minio/minio:RELEASE.2024-02-17T01-15-57Z
    command: server --console-address ":9001" http://minio/data{1...2}
    expose:
      - 9000
      - 9001
    ports:
      - 9000:9000
    environment:
      MINIO_ROOT_USER: s3accesskey
      MINIO_ROOT_PASSWORD: s3secretkey
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    hostname: minio
    volumes:
      - data1:/data1
      - data2:/data2

  nginx:
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 8000:8000
    restart: on-failure

volumes:
  redis_data:
  data1:
  data2:
  postgresql_master_data:
    driver: local
