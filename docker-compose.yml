version: '3'

x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  # delete-daemon:
  #   build: ./delete-daemon
  #   ports:
  #     - 5001:80

  # deleting-service:
  #   build: ./deleting-service
  #   ports:
  #     - 5002:80

  # ingest-service:
  #   build: ./ingest-service
  #   ports:
  #     - 5003:80

  # serving-service:
  #   build: ./serving-service
  #   ports:
  #     - 5004:80
  
  # authentication-service:
  #   build: ./authentication-service
  #   ports:
  #     - 5005:80

  rabbitmq:
    image: rabbitmq:3.11.28-management
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
    ports:
      - 5672:5672
      - 15672:15672

  postgres_primary:
    <<: *postgres-common
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - postgresql_master_data:/var/lib/postgresql/data
      - ./postgres-replica-init.sql:/docker-entrypoint-initdb.d/postgres-replica-init.sql

  postgres_replica:
    <<: *postgres-common
    ports:
      - 5433:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_dаta:/root/redis
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=my-password
      - REDIS_PORT=6379
      - REDIS_DATABASES=16

  scality_s3:
    image: scality/s3server:latest
    restart: always
    ports:
      - 8000:8000
    volumes:
      - s3data:/usr/src/app/localData
      - s3metadata:/usr/src/app/localMetadata
    environment:
      - SCALITY_ACCESS_KEY_ID=newAccessKey
      - SCALITY_SECRET_ACCESS_KEY=newSecretKey

volumes:
  postgresql_master_data:
    driver: local
  redis_dаta:
  s3data:
  s3metadata:
